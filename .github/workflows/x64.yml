name: immortalwrt in docker

on:
#  schedule:
#    - cron: 0 15 * * *
  workflow_dispatch:
    inputs:
      model:
        required: true
        description: Device Model
        type: choice
        default: x86-64
        options:
          - x86-64
      runs-on:
        required: true
        description: Runs on...
        type: choice
        default: ubuntu-22.04
        options:
          - ubuntu-20.04
          - ubuntu-22.04


env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DOCKER_REPO: jessekool/immortalwrt_multiple_ethports  # 替换为你的Docker仓库
  DOCKER_TAG: latest

jobs:
  Build:
    runs-on: ubuntu-22.04

    steps:
      - name: Maximize build space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          remove-docker-images: "true"
          remove-large-packages: "true"
          remove-cached-tools: "true"
          remove-swapfile: "true"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E apt -yqq install dos2unix
          sudo -E apt -yqq install libfuse-dev
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Initialization Values
        run: |
          export BUILD_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          export BUILD_SRC=$(awk -F"=" '/REPO_URL/ {print $NF}' "./compilecfg/x86-64.ini")
          echo "BUILD_SRC=$BUILD_SRC" >> $GITHUB_ENV

      - name: Pre Clone
        run: ./pre_clone_action.sh x86-64

      - name: inject set_dhcp_off script
        run: |
          sed -i '/^update_default_lan_addr() {/,/^}/ {
              /^}/a\
          \
          set_dhcp_off() {\
              /bin/sh "$GITHUB_WORKSPACE/set_dhcp.sh"\
          }
          }' update.sh
          sed -i '/^[[:space:]]*update_default_lan_addr$/a\    set_dhcp_off' update.sh
          chmod +x set_dhcp.sh
          
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ./action_build/.ccache
            ./action_build/staging_dir
          key: ${{ inputs.runs-on }}-${{ hashFiles('**/repo_flag') }}-${{ env.BUILD_DATE }}
          restore-keys: |
            ${{ inputs.runs-on }}-${{ hashFiles('**/repo_flag') }}-

      - name: Refresh the cache
        run: |
          if [ -d "./action_build/staging_dir" ]; then
            find "./action_build/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r dir; do
                find "$dir" -type f -exec touch {} +
            done
          fi

      - name: Build Firmware
        run: ./build.sh x86-64

      - name: Prepare Docker build context
        run: |
          mkdir -p docker/openwrt
          FIRMWARE_PATH=$(find . -name "immortalwrt-x86-64-generic-rootfs.tar.gz" | head -n 1)
          if [ -z "$FIRMWARE_PATH" ]; then
            echo "Error: Firmware file not found!"
            exit 1
          fi
          cp "$FIRMWARE_PATH" docker/openwrt/
          echo "FROM scratch" > docker/openwrt/Dockerfile
          echo "ADD $(basename "$FIRMWARE_PATH") /" >> docker/openwrt/Dockerfile

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          cd docker/openwrt
          docker build -t ${{ env.DOCKER_REPO }}:${{ env.BUILD_DATE }} .
          docker push ${{ env.DOCKER_REPO }}:${{ env.BUILD_DATE }}
          docker tag ${{ env.DOCKER_REPO }}:${{ env.BUILD_DATE }} ${{ env.DOCKER_REPO }}:${{ env.DOCKER_TAG }}
          docker push ${{ env.DOCKER_REPO }}:${{ env.DOCKER_TAG }}

      - name: Get Kernel Verion
        run: |
          # 获取内核版本
          echo "KVER=$(find ./action_build/dl -maxdepth 1 -name "linux-[4-6]\.*" | sort -r | head -n 1 | grep -oE "[4-6]\.[0-9]{1,3}\.[0-9]{1,3}")" >> $GITHUB_ENV

      - name: Delete Old Cache
        run: |
          # 获取缓存列表并删除
          gh cache list --key -- ${{ inputs.runs-on }}-${{ hashFiles('**/repo_flag') }}- --json key --jq '.[] | .key' | while read -r key; do
            gh cache delete "$key"
          done
          # 输出缓存状态
          echo "========cache status========"
          echo "ccache: $(du -sh ./action_build/.ccache | cut -f 1)"
          echo "staging: $(du -sh ./action_build/staging_dir | cut -f 1)"

      - name: Machine Information
        run: |
          echo "=============================================="
          lscpu | grep -E "name|Core|Thread"
          echo "=============================================="
          df -h
          echo "=============================================="

      - name: Prepare Release Body
        run: |
          echo "云编译发布" > release_body.txt
          echo "源码：${{ env.BUILD_SRC }}" >> release_body.txt
          echo "Kernel: ${{ env.KVER }}" >> release_body.txt
          echo "WIFI密码: 12345678" >> release_body.txt
          echo "LAN地址: 192.168.1.1" >> release_body.txt
          echo "插件：" >> release_body.txt
          echo "$(grep -oP "luci-app(-[a-zA-Z0-9]{1,}){1,}" ./firmware/*.manifest | awk -F":" '{print $NF}')"  >> release_body.txt
          echo "- 固件同步推送至docker_hub仓库jessekool/immortalwrt_multiple_ethports" >> release_body.txt
          echo "- immortalwrt for docker" >> release_body.txt
          echo "- 使用方式请参考恩山帖子https://www.right.com.cn/forum/thread-8413705-1-1.html" >> release_body.txt

      - name: Release Firmware
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.BUILD_DATE }}_x86-64
          files: ./firmware/*.*
          body_path: ./release_body.txt
